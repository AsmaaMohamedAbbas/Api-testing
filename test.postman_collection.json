{
	"info": {
		"_postman_id": "71775991-8609-4101-bd41-6868af0f8bdf",
		"name": "test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fac7954d-83fe-4781-be1f-c9fa11afd9c8",
						"exec": [
							"//Every response should return 200 OK.\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(\"OK\" );\r",
							"});\r",
							"//Bleow line of code will parse the response \r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"\r",
							"//First node should have more than 10 categories on children_data node.\r",
							"pm.test(\"First Node childern length more than 10\",() => {\r",
							"   \r",
							"     if (responseJson.children[0].children.length>10)\r",
							"     {\r",
							"         return true;\r",
							"     }\r",
							"     else\r",
							"     {\r",
							"         return false;\r",
							"     }\r",
							"});\r",
							" /*function  checkChildern(comingChildrens){\r",
							"    console.log(comingChildrens);   \r",
							"    for(let i=0 ; i< comingChildrens.length ; i++){\r",
							"        if (!('categoryId' in comingChildrens[i])){\r",
							"        \r",
							"            return false;\r",
							"        }\r",
							"        else{\r",
							"            if(comingChildrens[i].children){\r",
							"                if(comingChildrens[i].children.length>0){\r",
							"                this.checkChildern(comingChildrens[i])\r",
							"                }else{\r",
							"                    return true\r",
							"                }\r",
							"            }else{\r",
							"                return true;\r",
							"            }\r",
							"        \r",
							"        }\r",
							"    }\r",
							"};*/\r",
							"//Every node should have an \"id\"\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"each node hase an id\",() => {\r",
							"       const responseJson = pm.response.json();\r",
							"       console.log(responseJson);\r",
							"        var result = true;\r",
							"        var mainArray = responseJson.children;\r",
							"         //console.log(mainArray.length);\r",
							"        if(responseJson.categoryId){\r",
							"             for(let i=0 ; i< mainArray.length ; i++){\r",
							"                 let firstlevel = mainArray[i];\r",
							"                //  console.log(firstlevel.children.length);\r",
							"                 if(firstlevel.children.length > 0){\r",
							"                    for(let y=0 ; y < firstlevel.children.length ; y++){\r",
							"                          let secondLevelAobjext  =   firstlevel.children[y];\r",
							"                           if (!('categoryId' in secondLevelAobjext))\r",
							"                            {                                \r",
							"                                result =  false;\r",
							"                            }\r",
							"                    }\r",
							"                 }\r",
							"                  if (!('categoryId' in firstlevel))\r",
							"                    {                                \r",
							"                         result =  false;\r",
							"                    }\r",
							"            }\r",
							"        }\r",
							"        return result\r",
							"    \r",
							"});\r",
							"//- Every node should have a \"name\"\r",
							"pm.test(\"each node hase an Name\",() => {\r",
							"       const responseJson = pm.response.json();\r",
							"       console.log(responseJson);\r",
							"        var result = true;\r",
							"        var mainArray = responseJson.children;\r",
							"         //console.log(mainArray.length);\r",
							"        if(responseJson.name){\r",
							"             for(let i=0 ; i< mainArray.length ; i++){\r",
							"                 let firstlevel = mainArray[i];\r",
							"                //  console.log(firstlevel.children.length);\r",
							"                 if(firstlevel.children.length > 0){\r",
							"                    for(let y=0 ; y < firstlevel.children.length ; y++){\r",
							"                          let secondLevelAobjext  =   firstlevel.children[y];\r",
							"                           if (!('name' in secondLevelAobjext))\r",
							"                            {                                \r",
							"                                result =  false;\r",
							"                            }\r",
							"                    }\r",
							"                 }\r",
							"                  if (!('name' in firstlevel))\r",
							"                    {                                \r",
							"                         result =  false;\r",
							"                    }\r",
							"            }\r",
							"        }\r",
							"        return result\r",
							"    \r",
							"});\r",
							"\r",
							"// Every node should have a “url”\r",
							"\r",
							"pm.test(\"each node hase an URL\",() => {\r",
							"       const responseJson = pm.response.json();\r",
							"       console.log(responseJson);\r",
							"        var result = true;\r",
							"        var mainArray = responseJson.children;\r",
							"         //console.log(mainArray.length);\r",
							"        if(responseJson.url){\r",
							"             for(let i=0 ; i< mainArray.length ; i++){\r",
							"                 let firstlevel = mainArray[i];\r",
							"                //  console.log(firstlevel.children.length);\r",
							"                 if(firstlevel.children.length > 0){\r",
							"                    for(let y=0 ; y < firstlevel.children.length ; y++){\r",
							"                          let secondLevelAobjext  =   firstlevel.children[y];\r",
							"                           if (!('url' in secondLevelAobjext))\r",
							"                            {                                \r",
							"                                result =  false;\r",
							"                            }\r",
							"                    }\r",
							"                 }\r",
							"                  if (!('url' in firstlevel))\r",
							"                    {                                \r",
							"                         result =  false;\r",
							"                    }\r",
							"            }\r",
							"        }\r",
							"        return result\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}